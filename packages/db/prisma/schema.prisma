// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement()) 
  email              String              @unique
  password           String
  fullname           String?
  onRampTransactions OnRampTransaction[]
  mobileNumber       String              @unique
  sentTransfers      P2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers  P2pTransfer[]       @relation(name: "ToUserRelation")
  availableBalance   Int                 @default(0)
  lockedBalance      Int                 @default(0)
}

model ProviderTypes {
  id                String              @id @default(uuid())
  providerName      String
  createdAt         DateTime            @default(now())
  OnRampTransaction OnRampTransaction[]
  redirectUrl       String 
}

model OnRampTransaction {
  id         Int           @id  @default(autoincrement()) 
  status     Status        @default(PROCESSIONG)
  startTime  DateTime      @default(now())
  user       User          @relation(fields: [userId], references: [id])
  userId     Int  
  amount     Int
  provider   ProviderTypes @relation(fields: [providerId], references: [id])
  providerId String
  token      String        @unique()
}

model P2pTransfer {
  id         Int      @id @default(autoincrement())
  status     Status   @default(PROCESSIONG)
  startTime  DateTime @default(now())
  fromUserId Int
  fromUser   User     @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User     @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
  amount     Int
}

enum Status {
  PROCESSIONG
  SUCCESSFUL
  FAILED
  LOCKED
}
